#!/usr/bin/env node


const fs = require('fs');
const path = require('path');
const axios = require('axios');

const WEBSERVER_URL = "https://readme-builder.onrender.com/generate_readme";

function readFile(filePath) {
    try {
        return fs.readFileSync(filePath, 'utf8');
    } catch (error) {
        if (error.code === 'ENOENT') {
            return '';
        }
        throw error;
    }
}

function extractContactFromReadme(readmePath) {
    const readmeContent = readFile(readmePath);
    if (readmeContent) {
        const lines = readmeContent.split("\n");
        let flag = -1;
        for (let i = 0; i < lines.length; i++) {
            if (
                lines[i].toLowerCase().includes('contact') ||
                lines[i].toLowerCase().includes('maintainer') ||
                lines[i].toLowerCase().includes('author')
            ) {
                flag = i;
                break;
            }
        }
        if (flag !== -1) {
            return lines.slice(flag).join("\t");
        }
    }
    return extractContactFromConfigFiles(path.dirname(readmePath));
}

function extractContactFromConfigFiles(directory) {
    const possibleExtensions = [
        ".toml", ".xml", "Pipfile", "Makefile", "config.js", "Gemfile",
        ".gradle", ".json", ".md", ".env"
    ];

    for (const ext of possibleExtensions) {
        for (const filename of fs.readdirSync(directory)) {
            const filePath = path.join(directory, filename);
            const fileExt = path.extname(filename).toLowerCase();
            if (ext === fileExt || filename === ext) {
                const fileContent = readFile(filePath);
                if (
                    fileContent.includes('email') ||
                    fileContent.includes('contact') ||
                    fileContent.includes('author') ||
                    fileContent.includes('maintainer') ||
                    fileContent.includes('support')
                ) {
                    return fileContent;
                }
            }

            if (filename === 'setup.py') {
                const fileContent = readFile(filePath);
                if (
                    fileContent.includes('email') ||
                    fileContent.includes('contact') ||
                    fileContent.includes('author') ||
                    fileContent.includes('maintainer') ||
                    fileContent.includes('support')
                ) {
                    return fileContent;
                }
            }
        }
    }
    return '';
}

function getContextFromFiles(directory) {
    let context = "";
    let contributing = "";
    let license = "";
    let contact = "";

    const ignoredFiles = [
        "Dockerfile", "LICENSE", "CHANGELOG.md", "VERSION",
        "node_modules", "__pycache__", ".git", "build", "dist", ".next"
    ];

    function isIgnoredFile(filename) {
        return ignoredFiles.includes(filename) ||
            filename.startsWith(".") ||
            filename.endsWith(".yml") ||
            filename.endsWith(".lock") ||
            filename.endsWith(".env") ||
            filename.endsWith(".rdb") ||
            filename.endsWith(".csv");
    }

    function processDirectory(dirPath) {
        for (const entry of fs.readdirSync(dirPath)) {
            const entryPath = path.join(dirPath, entry);
            if (fs.statSync(entryPath).isDirectory() && isIgnoredFile(entry)) {
                continue;
            }
            if (fs.statSync(entryPath).isDirectory()) {
                if (ignoredFiles.includes(entry)) continue;

                const level = entryPath.replace(directory, "").split(path.sep).length;
                const indent = " ".repeat(4 * level);
                context += `${indent}${path.basename(entryPath)}/\n`;

                processDirectory(entryPath);
            } else if (!isIgnoredFile(entry)) {
                const subIndent = " ".repeat(4 * (path.dirname(entryPath).replace(directory, "").split(path.sep).length + 1));
                context += `${subIndent}${entry}\n`;

                if (entry.toLowerCase() === 'contributing.md') {
                    contributing = readFile(entryPath);
                } else if (entry.toLowerCase() === 'license' || entry.toLowerCase() === 'license.md') {
                    license = readFile(entryPath);
                } else if (entry.toLowerCase() === 'readme.md') {
                    contact = extractContactFromReadme(entryPath);
                }
            }
        }
    }

    processDirectory(directory);

    if (!contact) {
        contact = extractContactFromConfigFiles(directory);
    }

    return { context, contributing, license, contact };
}

async function getGeneratedReadme(context, contributing, license, contact) {
    const payload = { context, contributing, license, contact };
    console.log('Payload:', payload); // Log the payload

    try {
        const response = await axios.post(WEBSERVER_URL, payload);
        if (response.status === 200) {
            return response.data.readme;
        } else {
            throw new Error(`Error generating README: ${response.data.error}`);
        }
    } catch (error) {
    if (error.response) {
        console.error('Response data:', error.response.data);
        console.error('Response status:', error.response.status);
        console.error('Response headers:', error.response.headers);
    } else {
        console.error('Error message:', error.message);
    }
    throw error;
}
}

async function generateReadme(directory) {
    const { context, contributing, license, contact } = getContextFromFiles(directory);
    return await getGeneratedReadme(context, contributing, license, contact);
}

async function main() {
    const directory = process.argv[2];

    if (!directory) {
        console.error("Please provide the project directory to analyze.");
        process.exit(1);
    }

    try {
        const readmeContent = await generateReadme(directory);
        const readmePath = path.join(directory, 'README.md');
        fs.writeFileSync(readmePath, readmeContent, 'utf8');
        console.log(`README.md generated successfully in ${directory}`);
    } catch (error) {
        console.error('Failed to generate README.md');
        process.exit(1);
    }
}

main();
